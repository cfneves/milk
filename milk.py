import streamlit as st
import pandas as pd
from statsmodels.tsa.statespace.sarimax import SARIMAX
from statsmodels.tsa.seasonal import seasonal_decompose
import matplotlib.pyplot as plt
from datetime import date
from io import StringIO

# Configura√ß√£o da p√°gina
st.set_page_config(page_title="Sistema de An√°lise e Previs√£o de S√©ries Temporais", 
                   layout="wide", initial_sidebar_state="expanded")

# T√≠tulo da aplica√ß√£o com √≠cone
st.title("üìà Sistema de An√°lise e Previs√£o de S√©ries Temporais")

# Bot√£o para abrir o menu de explica√ß√£o
if st.button("‚ÑπÔ∏è Como funciona este relat√≥rio?"):
    with st.expander("Sobre o Relat√≥rio e o Funcionamento", expanded=True):
        st.markdown("""
            ### üìÑ Explica√ß√£o do Relat√≥rio de An√°lise e Previs√£o de S√©ries Temporais

            Este sistema permite realizar uma **an√°lise detalhada e previs√µes de s√©ries temporais** com base em dados hist√≥ricos mensais. Utilizando t√©cnicas de decomposi√ß√£o e o modelo **SARIMAX**, o aplicativo analisa padr√µes sazonais e tend√™ncias e gera previs√µes para per√≠odos futuros definidos pelo usu√°rio. 

            ### üéØ Objetivo do Relat√≥rio
            O objetivo deste relat√≥rio √© fornecer uma vis√£o clara das **tend√™ncias passadas** e uma previs√£o confi√°vel para o futuro. Isso √© especialmente √∫til para neg√≥cios ou setores que dependem de ciclos sazonais ou tend√™ncias de longo prazo, como **vendas mensais, produ√ß√£o agr√≠cola, indicadores econ√¥micos** e outros tipos de s√©ries temporais.

            ### üìù Guia de Uso - Filtros e Par√¢metros

            - **Upload de Dados (Arquivo CSV)**: Carregue um arquivo CSV contendo a s√©rie temporal que voc√™ deseja analisar. A s√©rie deve ser composta por valores mensais.
            - **Per√≠odo Inicial da S√©rie**: Define a data de in√≠cio da s√©rie temporal. Esse valor √© utilizado para construir o eixo de tempo do relat√≥rio.
            - **Meses para Previs√£o**: Define o n√∫mero de meses para os quais o modelo ir√° gerar previs√µes (1 a 48 meses).

            ### üîß Configura√ß√µes do Modelo SARIMAX

            - **AR Order (p)**: N√∫mero de termos autoregressivos.
            - **I Order (d)**: Grau de diferencia√ß√£o para tornar os dados estacion√°rios.
            - **MA Order (q)**: N√∫mero de termos de m√©dia m√≥vel.
            - **Seasonal AR Order (P)**: N√∫mero de termos autoregressivos para a parte sazonal.
            - **Seasonal I Order (D)**: Grau de diferencia√ß√£o sazonal.
            - **Seasonal MA Order (Q)**: N√∫mero de termos de m√©dia m√≥vel para a sazonalidade.
            - **Seasonal Periodicity (s)**: Define o per√≠odo de sazonalidade (12 para dados mensais).

            ### üìä Resultados do Relat√≥rio

            - **Decomposi√ß√£o da S√©rie Temporal**: Gr√°fico que mostra tend√™ncia, sazonalidade e res√≠duo da s√©rie.
            - **Previs√£o da S√©rie Temporal**: Gr√°fico da s√©rie hist√≥rica e a previs√£o para o futuro.
            - **Tabela de Dados da Previs√£o**: Valores previstos em tabela, com op√ß√£o de download.

            ### üíæ Baixar os Dados
            Clique em **"Baixar Previs√£o"** para salvar os dados de previs√£o em CSV.

            ### üìò Dicas para Uso Ideal

            - **Dados de Qualidade**: Use dados mensais consistentes.
            - **Ajuste dos Par√¢metros**: Experimente diferentes combina√ß√µes para obter a melhor previs√£o.
            - **Interpreta√ß√£o**: Utilize a decomposi√ß√£o para identificar fatores sazonais e tend√™ncias.
        """, unsafe_allow_html=True)

# Barra lateral com upload de arquivo e par√¢metros
with st.sidebar:
    st.header("Configura√ß√µes")
    uploaded_file = st.file_uploader("Escolha o arquivo CSV:", type=['csv'])
    if uploaded_file is not None:
        stringio = StringIO(uploaded_file.getvalue().decode("utf-8"))
        data = pd.read_csv(stringio, header=None)
        
        # Configura√ß√µes do per√≠odo
        data_inicio = date(2000, 1, 1)
        periodo = st.date_input("Per√≠odo Inicial da S√©rie", data_inicio)
        periodo_previsao = st.number_input("Meses para Previs√£o", min_value=1, max_value=48, value=12)
        
        # Configura√ß√µes do modelo SARIMAX
        st.subheader("Configura√ß√µes do Modelo SARIMAX")
        p = st.number_input("AR Order (p)", min_value=0, max_value=5, value=2)
        d = st.number_input("I Order (d)", min_value=0, max_value=2, value=0)
        q = st.number_input("MA Order (q)", min_value=0, max_value=5, value=0)
        P = st.number_input("Seasonal AR Order (P)", min_value=0, max_value=5, value=0)
        D = st.number_input("Seasonal I Order (D)", min_value=0, max_value=2, value=1)
        Q = st.number_input("Seasonal MA Order (Q)", min_value=0, max_value=5, value=1)
        s = st.number_input("Seasonal Periodicity (S)", min_value=1, max_value=12, value=12)
        
        processar = st.button("üîç Processar An√°lise e Previs√£o")

# Processamento dos dados
if uploaded_file is not None and processar:
    try:
        # Configura√ß√£o da s√©rie temporal
        ts_data = pd.Series(data.iloc[:, 0].values, index=pd.date_range(start=periodo, periods=len(data), freq='M'))
        
        # Decomposi√ß√£o da s√©rie
        decomposicao = seasonal_decompose(ts_data, model='additive')
        fig_decomposicao = decomposicao.plot()
        fig_decomposicao.set_size_inches(5, 4)

        # Configura√ß√£o e ajuste do modelo SARIMAX
        modelo = SARIMAX(ts_data, order=(p, d, q), seasonal_order=(P, D, Q, s))
        modelo_fit = modelo.fit(disp=False)
        previsao = modelo_fit.forecast(steps=periodo_previsao)

        # Gr√°fico de previs√£o
        fig_previsao, ax = plt.subplots(figsize=(5, 4))
        ax = ts_data.plot(ax=ax, label='S√©rie Hist√≥rica')
        previsao.plot(ax=ax, style='r--', label='Previs√£o')
        plt.legend()

        # Exibir gr√°ficos em containers
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("### Decomposi√ß√£o da S√©rie Temporal")
            st.pyplot(fig_decomposicao)
        
        with col2:
            st.write("### Previs√£o da S√©rie Temporal")
            st.pyplot(fig_previsao)

        st.write("### Dados da Previs√£o")
        st.dataframe(previsao, height=300)
        csv_previsao = previsao.to_csv(index=True)
        st.download_button(label="üì• Baixar Previs√£o", data=csv_previsao, 
                           file_name="previsao.csv", mime="text/csv")

    except Exception as e:
        st.error(f"Erro ao processar os dados: {e}")

# Rodap√© com informa√ß√µes do desenvolvedor
st.write("---")
st.markdown(
    """
    <div style='text-align: center; margin-top: 20px; line-height: 1.2;'>
        <p style='font-size: 16px; font-weight: bold; margin: 0;'>Projeto: Sistema de An√°lise e Previs√£o de S√©ries Temporais</p>
        <p style='font-size: 14px; margin: 5px 0;'>Desenvolvido por:</p>
        <p style='font-size: 20px; color: #4CAF50; font-weight: bold; margin: 0;'>Cl√°udio Ferreira Neves</p>
        <p style='font-size: 16px; color: #555; margin: 0;'>Especialista em An√°lise de Dados, RPA e AI</p>
        <p style='font-size: 14px; margin: 10px 0 5px 0;'>Ferramentas utilizadas: Python, Streamlit, Pandas, StatsModels, Matplotlib</p>
        <p style='font-size: 12px; color: #777; margin: 0;'>¬© 2024</p>
    </div>
    """,
    unsafe_allow_html=True
)
